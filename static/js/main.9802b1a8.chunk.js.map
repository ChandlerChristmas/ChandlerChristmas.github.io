{"version":3,"sources":["components/Header.jsx","components/YearOverride.jsx","components/YearQuery.jsx","components/PairsTable.jsx","components/RandomizedTable.jsx","pairingFunctions/randomPair.js","App.js","pairingFunctions/rotatedPair.js","reportWebVitals.js","index.js"],"names":["Header","className","YearOverride","year","isYearOverridden","setIsYearOverridden","children","useState","showOverrides","setShowOverrides","useEffect","YearOverrides","y","x","onClick","YearQuery","setYear","currentYear","Date","getFullYear","yearOptionsArray","i","Config","yearLowerLimit","yearUpperLimit","push","onChange","event","target","value","PairsTable","drawnNames","tableRows","Object","keys","forEach","name","RandomizedTable","randomizedTableKey","setRandomizedTableKey","input","resultingPairs","arr1","slice","arr2","sort","Math","random","length","name1","pop","name2","shift","drawNamesFromListReturnObject","NamesList","randomNamesTable","App","rotatedNames","listLength","offset","index","rotateNamesFromListReturnObject","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9802b1a8.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => <header className=\"App-header\">\n    <h1>Christmas List</h1>\n</header>\n\nexport default Header;","import React, { useEffect, useState } from 'react'\nimport YearOverrides from \"../resources/yearOverrides.json\"\n\nconst YearOverride = ({ year, isYearOverridden, setIsYearOverridden, children }) => {\n    const [showOverrides, setShowOverrides] = useState(true)\n    useEffect(() => {\n        let localIsYearOverridden = showOverrides && year in YearOverrides;\n        setIsYearOverridden(localIsYearOverridden);\n    }, [year, showOverrides, setIsYearOverridden])\n    return <div className={isYearOverridden ? \"yearOverridden\" : \"\"}>\n        <div className={isYearOverridden ? \"yearOverriddenSide\" : \"yearOverriddenSideHidden\"}>\n            <svg className=\"yearOverriddenSideSVG\">\n                <text y=\"25\" x=\"5\" className=\"yearOverriddenSideSVGText\">Overridden</text>\n            </svg>\n        </div>\n        <button className=\"standardButton\" onClick={() => {\n            setShowOverrides(!showOverrides)\n        }}>{showOverrides ? \"Hide\" : \"Show\"} Overrides</button>\n        {children}\n    </div>\n}\n\nexport default YearOverride;","import React from 'react'\nimport Config from \"../resources/config.json\"\n\nconst YearQuery = ({ year, setYear }) => {\n    const currentYear = new Date().getFullYear();\n    let yearOptionsArray = [];\n    for (let i = Config.yearLowerLimit; i <= Config.yearUpperLimit; i++) {\n        yearOptionsArray.push(<option key={i}>{i}</option>)\n    }\n    return <>\n        <select className=\"YearSelectorDropdown\" onChange={event => {setYear(event.target.value)}} value={year}>\n            {yearOptionsArray}\n        </select>\n        &nbsp;\n        <button className=\"YearSelectorButton\" onClick={\n            () => {\n                setYear(currentYear)\n            }}>\n            This Year\n        </button>\n    </>\n}\n\nexport default YearQuery;","import React from 'react'\n\nconst PairsTable = ({ drawnNames }) => {\n    let tableRows = [];\n    Object.keys(drawnNames).forEach((name) => {\n        tableRows.push(\n            <tr key={name}>\n                <td>{name}</td>\n                <td>{drawnNames[name]}</td>\n            </tr>\n        );\n    });\n    return <table className=\"PairsTable\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Match</th>\n            </tr>\n        </thead>\n        <tbody>{tableRows}</tbody>\n    </table>\n}\n\nexport default PairsTable;","import React, { useState } from 'react'\nimport PairsTable from \"./PairsTable\";\nimport { drawNamesFromListReturnObject } from \"../pairingFunctions/randomPair\";\nimport NamesList from \"../resources/namesList.json\";\n\nconst RandomizedTable = () => {\n  const [randomizedTableKey, setRandomizedTableKey] = useState(0);\n  let drawnNames = drawNamesFromListReturnObject(NamesList);\n  let randomNamesTable = randomizedTableKey ? (\n    <PairsTable key={randomizedTableKey} drawnNames={drawnNames} />\n  ) : null;\n  return (\n    <div className=\"RandomizedTable\">\n      <h3 className=\"RandomizerH3\" >Simulate Random Drawing</h3>\n      <button\n        className=\"standardButton\"\n        onClick={() => {\n          setRandomizedTableKey(randomizedTableKey + 1);\n        }}\n      >\n        Generate Table\n        </button>\n      <br />\n      {randomNamesTable}\n    </div>\n  );\n\n}\n\nexport default RandomizedTable;","// random bit independent of year... maybe change later to rotated list\n// also TODO maybe is pick a better randomizer like the one on random.org\n// in edge case can get your own name\nexport function drawNamesFromListReturnObject(input) {\n  let resultingPairs = {};\n  let arr1 = input.slice(); // copy array\n  let arr2 = input.slice(); // copy array again\n\n  arr1.sort(() => {\n    return 0.5 - Math.random();\n  });\n  arr2.sort(() => {\n    return 0.5 - Math.random();\n  });\n\n  while (arr1.length) {\n    let name1 = arr1.pop(); // get the last value of arr1\n    let name2 = arr2[0] === name1 ? arr2.pop() : arr2.shift();\n    //         ^^ if the first value is the same as name1,\n    //            get the last value, otherwise get the first\n    resultingPairs[name1] = name2;\n  }\n  return resultingPairs;\n}\n","import {useState} from \"react\";\nimport Header from \"./components/Header\"\nimport YearOverride from \"./components/YearOverride\";\nimport YearQuery from \"./components/YearQuery\";\nimport PairsTable from \"./components/PairsTable\";\nimport RandomizedTable from \"./components/RandomizedTable\";\nimport {rotateNamesFromListReturnObject} from \"./pairingFunctions/rotatedPair\";\nimport NamesList from \"./resources/namesList.json\";\nimport YearOverrides from \"./resources/yearOverrides.json\";\nimport \"./App.css\";\n\nfunction App() {\n  const [year, setYear] = useState(new Date().getFullYear());\n  const [isYearOverridden, setIsYearOverridden] = useState(false);\n  let rotatedNames =\n    isYearOverridden && year in YearOverrides\n      ? YearOverrides[year]\n      : rotateNamesFromListReturnObject(NamesList, year);\n  return (\n    <div className=\"App\">\n      <Header />\n      <br />\n      <YearQuery key={year} year={year} setYear={setYear} />\n      <br /> <br />\n      <YearOverride\n        year={year}\n        isYearOverridden={isYearOverridden}\n        setIsYearOverridden={setIsYearOverridden}\n      >\n        <PairsTable drawnNames={rotatedNames} />\n      </YearOverride>\n      <br />\n      <RandomizedTable />\n    </div>\n  );\n}\n\nexport default App;\n","export function rotateNamesFromListReturnObject(input, year) {\n  const listLength = input.length;\n  const startingYear = 2000;\n  let resultingPairs = {};\n  let offset = ((year - startingYear) % (listLength - 1)) + 1;\n  input.forEach((name, index) => {\n    resultingPairs[name] = input[(index + offset) % listLength];\n  });\n\n  return resultingPairs;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}